{"version":3,"sources":["component/converter/Converter.js","App.js","serviceWorker.js","index.js"],"names":["Converter","state","currencies","base","amount","convertTo","result","date","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","data","handleSelect","e","setState","target","name","value","handleInput","calculate","isNaN","fetch","then","res","json","rates","toFixed","this","className","style","type","onChange","map","currency","key","disabled","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qQAiJeA,E,4MA9IbC,MAAQ,CACNC,WAAY,CAAC,MAAO,MAAO,MAAO,MAAO,OACzCC,KAAM,MACNC,OAAQ,GACRC,UAAW,MACXC,OAAQ,GACRC,KAAM,GACNC,OAAQ,CAAC,OACTC,SAAU,CACR,CACEC,MAAO,WACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,qBACjBC,YAAa,gBACbC,YAAa,EACbC,KAAM,M,EAKZC,aAAe,SAAAC,GAAM,IAAD,EAClB,EAAKC,UAAL,mBAEKD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,OAF9B,uBAGY,MAHZ,K,EAQFC,YAAc,SAAAL,GACZ,EAAKC,SACH,CACEf,OAAQc,EAAEE,OAAOE,MACjBhB,OAAQ,KACRC,KAAM,Q,EAKZiB,UAAY,WACV,IAAMpB,EAAS,EAAKH,MAAMG,OACtBA,IAAWqB,OAGbC,MAAM,+CAAD,OAAgD,EAAKzB,MAAME,OAC7DwB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAX,GACJ,IAAMT,EAAOS,EAAKT,KACZD,GAAUU,EAAKc,MAAM,EAAK7B,MAAMI,WAAaD,GAAQ2B,QAAQ,GACnE,EAAKZ,SAAS,CACZb,SACAC,a,uDAMA,IAAD,EACuDyB,KAAK/B,MAA3DC,EADD,EACCA,WAAYC,EADb,EACaA,KAAMC,EADnB,EACmBA,OAAQC,EAD3B,EAC2BA,UAAWC,EADtC,EACsCA,OAAQC,EAD9C,EAC8CA,KACrD,OACE,yBAAK0B,UAAU,iBAAiBC,MAAO,CAACrB,gBAAiB,cACvD,yBAAKoB,UAAU,OACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,kBACb,4BACG7B,EADH,IACYD,EADZ,qBAGA,4BACc,KAAXC,EACG,IACW,OAAXE,EACA,iBACAA,EAAQ,IACXD,GAEH,oCAAqB,KAAXD,EAAgB,QAAmB,OAATG,EAAgB,GAAKA,GACzD,yBAAK0B,UAAU,OACb,yBAAKA,UAAU,aACb,0BAAMA,UAAU,oBACd,2BACEE,KAAK,SACLb,MAAOlB,EACPgC,SAAUJ,KAAKT,YACfU,UAAU,sCAEZ,4BACEZ,KAAK,OACLC,MAAOnB,EACPiC,SAAUJ,KAAKf,aACfgB,UAAU,gCAET/B,EAAWmC,KAAI,SAAAC,GAAQ,OACtB,4BAAQC,IAAKD,EAAUhB,MAAOgB,GAC3BA,QAMT,0BAAML,UAAU,oBACd,2BACEO,UAAU,EACVlB,MACa,KAAXlB,EACI,IACW,OAAXE,EACA,iBACAA,EAEN2B,UAAU,sCAEZ,4BACEZ,KAAK,YACLC,MAAOjB,EACP+B,SAAUJ,KAAKf,aACfgB,UAAU,gCAET/B,EAAWmC,KAAI,SAAAC,GAAQ,OACtB,4BAAQC,IAAKD,EAAUhB,MAAOgB,GAC3BA,SAOX,yBAAKL,UAAU,YACb,4BAAQQ,QAAST,KAAKR,UAAWS,UAAU,QAA3C,qB,GAjIMS,aCUTC,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCKcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6c459261.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Converter extends Component {\r\n  state = {\r\n    currencies: [\"USD\", \"AUD\", \"SGD\", \"PHP\", \"INR\"],\r\n    base: \"USD\",\r\n    amount: \"\",\r\n    convertTo: \"INR\",\r\n    result: \"\",\r\n    date: \"\",\r\n    labels: [\"INR\"],\r\n    datasets: [\r\n      {\r\n        label: 'Currency',\r\n        fill: false,\r\n        lineTension: 0.5,\r\n        backgroundColor: 'rgba(75,192,192,1)',\r\n        borderColor: 'rgba(0,0,0,1)',\r\n        borderWidth: 2,\r\n        data: [] \r\n      }\r\n    ]\r\n  };\r\n\r\n  handleSelect = e => {\r\n    this.setState(\r\n      {\r\n        [e.target.name]: e.target.value,\r\n        result: null\r\n      },   \r\n    );\r\n  };\r\n\r\n  handleInput = e => {\r\n    this.setState(\r\n      {\r\n        amount: e.target.value,\r\n        result: null,\r\n        date: null\r\n      },\r\n    );\r\n  };\r\n\r\n  calculate = () => {\r\n    const amount = this.state.amount;\r\n    if (amount === isNaN) {\r\n      return;\r\n    } else {\r\n      fetch(`https://api.exchangeratesapi.io/latest?base=${this.state.base}`)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          const date = data.date;\r\n          const result = (data.rates[this.state.convertTo] * amount).toFixed(4);\r\n          this.setState({\r\n            result,\r\n            date\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { currencies, base, amount, convertTo, result, date } = this.state;\r\n    return (\r\n      <div className=\"container my-5\" style={{backgroundColor: \"lightblue\"}}>\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-6 mx-auto\">\r\n            <div className=\"card card-body\">\r\n              <h5>\r\n                {amount} {base} is equevalent to\r\n              </h5>\r\n              <h2>\r\n                {amount === \"\"\r\n                  ? \"0\"\r\n                  : result === null\r\n                  ? \"Calculating...\"\r\n                  : result}{\" \"}\r\n                {convertTo}\r\n              </h2>\r\n              <p>As of {amount === \"\" ? \"/ / /\" : date === null ? \"\" : date}</p>\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-10\">\r\n                  <form className=\"form-inline mb-4\">\r\n                    <input\r\n                      type=\"number\"\r\n                      value={amount}\r\n                      onChange={this.handleInput}\r\n                      className=\"form-control form-control-lg mx-3\"\r\n                    />\r\n                    <select\r\n                      name=\"base\"\r\n                      value={base}\r\n                      onChange={this.handleSelect}\r\n                      className=\"form-control form-control-lg\"\r\n                    >\r\n                      {currencies.map(currency => (\r\n                        <option key={currency} value={currency}>\r\n                          {currency}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </form>\r\n\r\n                  <form className=\"form-inline mb-4\">\r\n                    <input\r\n                      disabled={true}\r\n                      value={\r\n                        amount === \"\"\r\n                          ? \"0\"\r\n                          : result === null\r\n                          ? \"Calculating...\"\r\n                          : result\r\n                      }\r\n                      className=\"form-control form-control-lg mx-3\"\r\n                    />\r\n                    <select\r\n                      name=\"convertTo\"\r\n                      value={convertTo}\r\n                      onChange={this.handleSelect}\r\n                      className=\"form-control form-control-lg\"\r\n                    >\r\n                      {currencies.map(currency => (\r\n                        <option key={currency} value={currency}>\r\n                          {currency}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </form>\r\n                </div>\r\n\r\n                <div className=\"col-lg-6\">\r\n                  <button onClick={this.calculate} className=\"swap\">\r\n                    Convert\r\n                  </button>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Converter;\r\n","import React from 'react';\nimport './App.css';\nimport Converter from './component/converter/Converter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Converter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}